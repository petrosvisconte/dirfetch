#!/bin/bash
#
# Author: Pierre Visconti
# Dirfetch: A lightweight directory information fetcher for *nix 
#
# 
# Usage: 
# 
# dirfetch
# dirfetch /path/to/dir

set -euo pipefail


function main {
    ### Possible colors have been defined below
	# prefixes:
	# l: light variant
	# d: dark variant
	# b: bolded
	local default="\e[0;39m"
	local black="\e[0;30m"
	local red="\e[0;31m"
	local green="\e[0;32m"
	local yellow="\e[0;33m"
	local blue="\e[0;34m"
	local purple="\e[0;35m"
	local cyan="\e[0;36m"
	local l_gray="\e[0;37m"
	local d_gray="\e[0;90m"
	local l_red="\e[0;91m"
	local l_green="\e[0;92m"
	local l_yellow="\e[0;93m"
	local l_blue="\e[0;94m"
	local l_purple="\e[0;95m"
	local l_cyan="\e[0;96m"
	local white="\e[0;97m"
	local b_default="\e[1;39m"
	local b_black="\e[1;30m"
	local b_red="\e[1;31m"
	local b_green="\e[1;32m"
	local b_yellow="\e[1;33m"
	local b_blue="\e[1;34m"
	local b_purple="\e[1;35m"
	local b_cyan="\e[1;36m"
	local bl_gray="\e[1;37m"
	local bd_gray="\e[1;90m"
	local bl_red="\e[1;91m"
	local bl_green="\e[1;92m"
	local bl_yellow="\e[1;93m"
	local bl_blue="\e[1;94m"
	local bl_purple="\e[1;95m"
	local bl_cyan="\e[1;96m"
	local b_white="\e[1;97m"

    ######## CUSTOMIZATION VARIABLES: MODIFY THE FOLLOWING SECTION #############
	# Units
    # 
    # Default: '1024'
    # Values: '1000', '1024'
    # Note: Set to 1000 for SI units (base 10), set to 1024 for real units (base 2)
    UNITS='1024' 

    # Style
    # 
    # Default: 'box'
    # Values: 'box', 'text'
    STYLE='box'

    # Colors
    # 
    # Values: Any of the predefined colors above
    BOX_COLOR="${l_blue}"
    TEXT_COLOR="${l_gray}"
    ##################### END OF CUSTOMIZATION VARIABLES #######################
    
    Display_Out
}

function Dir {
    if [ "${dir:-}" ]; then
        [ -z "${dir}" ] && { pwd; return; }
        (cd -P -- "${dir}" && pwd)
    else
        printf $(pwd)
    fi
}

function Get_Files {
    local curr=
    local sub=
    local total=
    if [ "${dir:-}" ]; then
        curr=$(find "${dir}" -maxdepth 1 -type f | wc -l)                
        sub=$(find "${dir}" -mindepth 2 -type f | wc -l)
        total=$(find "${dir}" -type f | wc -l)
        printf "${curr} curr - ${sub} sub - ${total} total"
    else
        curr=$(find -maxdepth 1 -type f | wc -l)                
        sub=$(find -mindepth 2 -type f | wc -l)
        total=$(find -type f | wc -l)
        printf "${curr} curr - ${sub} sub - ${total} total"
    fi
}

function Get_Dir {
    local curr=
    local sub=
    local total=
    if [ "${dir:-}" ]; then
        curr=$(find "${dir}" -maxdepth 1 -type d | wc -l)
        sub=$(find "${dir}" -mindepth 2 -type d | wc -l)
        total=$(find "${dir}" -type d | wc -l)
        printf "${curr} curr - ${sub} sub - ${total} total"
    else 
        curr=$(find -maxdepth 1 -type d | wc -l)                
        sub=$(find -mindepth 2 -type d | wc -l)
        total=$(find -type d | wc -l)
        printf "${curr} curr - ${sub} sub - ${total} total"
    fi
}

function Get_Size {
    local size=
    if [ "${dir:-}" ]; then 
        size=$(du -sb ${dir})
        size=$(printf $size)
    else 
        size=$(du -sb)
        size=$(printf $size)
    fi
    # Converts bytes value to human-readable string [$1: bytes value]
    local i=${size} 
    local d="" 
    local s=0 
    local S=("Bytes" "kB" "MB" "GB" "TB" "PB" "EB" "YB" "ZB")
    if [ "${UNITS}" == "1000" ]; then
        while ((i > 1000 && s < ${#S[@]}-1)); do
            printf -v d ".%02d" $((i % 1000 * 100 / 1000))
            i=$((i / 1000))
            s=$((s + 1))
        done
    else 
        while ((i > 1024 && s < ${#S[@]}-1)); do
            printf -v d ".%02d" $((i % 1024 * 100 / 1024))
            i=$((i / 1024))
            s=$((s + 1))
        done
    fi
    printf "$i$d ${S[$s]}"

}

function Box_Out {
    local w=
    local b=
    local s=("${@}") b w
    for l in "${s[@]}"; do
        ((w<${#l})) && { b="${l}"; w="${#l}"; }
    done
    printf "\n${BOX_COLOR}    --${b//?/-}--\n   | ${b//?/ }   |\n"
    for l in "${s[@]}"; do
        printf "   ${BOX_COLOR}|  ${TEXT_COLOR}%s%*s%s ${BOX_COLOR} |\n" "" "-${w}" "${l}"
    done
    printf "${BOX_COLOR}   | ${b//?/ }   |\n    --${b//?/-}--\n\n"
}

function Text_Out {
    local w=
    local b=
    local s=("${@}") b w
    for l in "${s[@]}"; do
        ((w<${#l})) && { b="${l}"; w="${#l}"; }
    done
    echo ""
    for l in "${s[@]}"; do
        printf "   ${BOX_COLOR}  ${TEXT_COLOR}%s%*s%s ${BOX_COLOR} \n" "" "-${w}" "${l}"
    done
    echo ""
}

function Display_Out {
    if [ "${STYLE}" == 'box' ]; then
        Box_Out "Path      $(Dir)" "Files     $(Get_Files)" "Dir       $(Get_Dir)" "Size      $(Get_Size)"
    elif [ "${STYLE}" == 'text' ]; then 
        Text_Out "Path   :   $(Dir)" "Files  :   $(Get_Files)" "Dir    :   $(Get_Dir)" "Size   :   $(Get_Size)"
    fi

}

if [ "${1:-}" ]; then
    dir="${1}"
fi
main $@